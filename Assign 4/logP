def logP(data,theta):
    kp = np.exp(sigma_f)*np.exp(-0.5*np.exp(sigma_l)*XXi_XXj);
    # kp1 = np.exp(sigma_f) * np.exp( -0.5 * np.exp(sigma_l) * np.subtract.outer(XX, XX)**2)
    # ipdb.set_trace();
    # kp = sigma*np.exp(-0.5/l*XXi_XXj);
    kl = -0.5*np.exp(sigma_l)*XXi_XXj;
    # kl = 1/(l*l)*XXi_XXj;

    Q = kp + np.eye(L)*np.exp(sigma_n);
    Lc=np.linalg.cholesky(Q)
    # beta=np.linalg.solve(Lc.transpose(),np.linalg.solve(Lc,YY))
    Qinv = np.linalg.solve(Lc.transpose(),np.linalg.solve(Lc,np.eye(L)))
    # Qinv = LA.inv(Q);

    dPdf = 0.5*(YY.transpose()).dot(Qinv).dot(kp).dot(Qinv).dot(YY) - 0.5*np.trace(Qinv.dot(kp));
    # dPdf = 0.5*np.matmul(S,kp).dot(S.transpose()) - 0.5*np.trace(np.matmul(Qinv,kp));
    # ipdb.set_trace();
    # dPdf = 0.5*(YY.transpose()).dot(Qinv).dot(kp).dot(Qinv).dot(YY) - 0.5*np.trace(Qinv.dot(kp));

    dPdl = 0.5*(YY.transpose()).dot(Qinv).dot(np.multiply(kp,kl)).dot(Qinv).dot(YY) - 0.5*np.trace(Qinv.dot(np.multiply(kp,kl)));

    dPdn = 0.5*(YY.transpose()).dot(Qinv).dot(Qinv).dot(YY)*np.exp(sigma_n) - 0.5*np.trace(Qinv*np.exp(sigma_n));

    sigma_f = sigma_f - eta**2*dPdf;#-eta*dPdf doesn't converge
    sigma_l = sigma_l - eta**2*dPdl;#-eta*dPdl doesn't converge
    # sigma_n = sigma_n - eta*dPdn;#-eta*dPdn doesn't converge
    err = (np.abs(dPdf[0,0])+np.abs(dPdl[0,0])+np.abs(dPdn[0,0]));
    count=count+1;
    print("count=",count)
    print("err=",err)
    print("sigma_l=",sigma_l)
    print("sigma_n=",sigma_n)
    print("sigma_f=",sigma_f)
    print("det=",LA.det(Q))
    # ipdb.set_trace();
